install.packages("foreign")
require (foreign)
capa <- c(4330, 5500, 5500, 4700, 5200, 5500, 4700, 5500, 5800, 5000)
calidad <- c(2,3,4,3,4,4,4,5,5,5)
precio <- c(190,219,249,249,250,340,289,395,439,525)

mochil <- data.frame (precio,capa, calidad)

mochil1 <- mochil[c(-1,-7,-10 ),]
mochil2 <- mochil [,-2]

## primero aplicamos una correlacion 
cor (mochil1, use = "everything", method = "pearson")
## observamos que las variables tienen correlaciones diversas
#aplicamos modelo 
help (lm)
modmo <- lm(precio~calidad+capa, mochil)
modmo2 <- lm(mochil1$precio~mochil1$calidad+mochil1$capa)

summary (modmo)
# se revisa la R2 ajustada por ser un mRM tenemos una 
#r2 ajustada de .70 lo que implica que la recta de regresion 
#explica en 70 por ciento la variabilidad del modelo
# revisando el valor F y p value tenemos que si cumple con 
# los criterios de un buen ajuste (F>1 Y PVALUE < .05)
# con estos datos podemos mencionar que estamos
# ante un buen modelo por lo que se pasa al diagnostico 
# el diagnostico se realiza para poder generalizar los 
# resultados del modelo aa partir de la revisiÃ³n de los 
# supuestos 
#lo primero que se hace en un mrm es observar graficamente 
#los supuestos
# en primer lugar se contrastan  los valores
# residuales contra los valores ajustrados
# se realiza con la funcion plot y el argumento which = 1
#recuerden que el pch cambia la figura de las observaciones
plot(modmo, which = 1, pch = 3)
## aqui esperamos que los residuos se distribuyan sin patroin
#Una tendencia en la variabilidad de los residuos sugiere 
#que la varianza estÃ¡ relacionada con la media, violando el 
#supuesto de varianza constante.
plot(modmo, which = 2, pch = 3)
# en este caso esperamos que los residuos 
#tipificados  alrededor de la liena
# se observa que si hay distriubucion normal 
#### tercer supuesto#########33
#los residuos estÃ¡n estandarizados 
#por sus desviaciones estÃ¡ndar estimadas. 
plot(modmo, which = 3, pch = 3)
# aqui podemos ver si los residuos se distribuyyen constantes
# en los valores ajustados 
#### cuarto supuesto ####
plot(modmo, which = 5, pch = 3)
#expone la importancia de cada observacion en el modelo 
# en esta distancia el grafico nos muestra las observaciones 
# que podrÃ­an impactar en el modelo, por lo que se sugiere eliminarlas
############################
 #despues que analizas graficamente
#se aplican pruebas para confirmar 
# que el mrm si cumple con los supuestos
# para aplicar estas pruebas se generan los
# valores ajustados, residuales y los estadarizads
mochil$ajustados <- fitted (modmo)
mochil$res <- residuals (modmo)
mochil$rstud <- rstudent(modmo)
#### prueba de normalidad 
## paqueteria lmtest
install.packages("lmtest")
require (lmtest)
ks.test (mochil$rstud, "pnorm")
### se plantea prueba de huipotesis
# y se espera un p value mayor a .05
# si tenemos un p value mayor a .05 
# no se rechaza la Ho y se acepta 
#que hay normalidad
# en este caso el modelo pasa la prueba de 
#normalidad 
##### a segunda prueba que se hace es 
# la homogeneidad de varanzas y esta prueba
# se realiza con la funcion bptest
bptest (modmo, studentize = FALSE, data = mochil)
## tenemos un p-value mayopr a .05, 
#por lo tanto pasa la prueba de hoogeneidad 
#varianzas
#### la tercera prueba es de autocorrrelacin
#### esta prueba se llama de durbin watson
# la funcion para esta ´prueba es dw()
dwtest(modmo, alternative= "two.sided", data= mochil)
### en esta prueba hay dos formas para comprobar
#1) el p value mayor a .05
#2) el vaor de durbin watson (rango aceptable 1.5 a 2.5)
#### hasta aqui podriamos confirmar que no hay correlacion
#entre los reswiduos 
## con estas pruebas ya se confirma que tenemos un modelo
#con buen ajuste. sin embargo hay que revisar los casos
## atipicos.. para revisar los atipicos se usa la
#libreria car
installed.packages("car")
require (car)
outlierTest (modmo)
outlier.test (modmo)
#### una vez que observamos los casos atipicos 
# procedemos a conocer la influencia de estos casos 
# en el modelo para observar a influencia se utiliza
# la funcion influence.measures()
influ<- influence.measures(modmo)
summary (influ)
# en la primera columna se observa los casos 
# mas influyentes que en este modelo son 1,2 y 10
# las columnas que hacen referencia a dfb nos indican
#la influencia en los coeficientes del modelo
#las columnas que nos presentan mayor interes son las
#cook.d y hat que nos exxponen con mayor claridad la
# la influencia el cook.d es la distancia de cook
# y entre más cercano a 1 hay mayor influencia de 
#la observacion en este caso a obs 10 es a que tiene 
# mayor distancia de coook, en esta distancia valores
#mayores a 1 hay certeza de que si influyen
# en la columna de hat se asocia con las medidas de 
#leverage que varian entre 0 y 1. entre mas cercano a 1
# ayor influencia
# ademas de estas ´pruebas se hace e anaisis grafico de 
#os casos infuyentes para este anaisis tenemos la 
#funcion influencepot()... se require la libreria car
# el analisis de este grafico se realiza con base en 
# e tamño de las circunferencias que arroja
# es decir a mayor circunferencia el cas tiene mayor
# influencia
# grafica de distancia de cook. se require de la
#ibreria faraway
install.packages("faraway")
require (faraway)
dc<- cooks.distance (modmo)
etiqueta <- rownames (mochil)
halfnorm(dc, 3,  etiqueta)
